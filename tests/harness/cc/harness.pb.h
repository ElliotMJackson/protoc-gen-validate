// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: harness.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_harness_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_harness_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_harness_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_harness_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_harness_2eproto;
namespace tests {
namespace harness {
class TestCase;
struct TestCaseDefaultTypeInternal;
extern TestCaseDefaultTypeInternal _TestCase_default_instance_;
class TestResult;
struct TestResultDefaultTypeInternal;
extern TestResultDefaultTypeInternal _TestResult_default_instance_;
}  // namespace harness
}  // namespace tests
PROTOBUF_NAMESPACE_OPEN
template<> ::tests::harness::TestCase* Arena::CreateMaybeMessage<::tests::harness::TestCase>(Arena*);
template<> ::tests::harness::TestResult* Arena::CreateMaybeMessage<::tests::harness::TestResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tests {
namespace harness {

// ===================================================================

class TestCase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tests.harness.TestCase) */ {
 public:
  inline TestCase() : TestCase(nullptr) {}
  ~TestCase() override;
  explicit PROTOBUF_CONSTEXPR TestCase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestCase(const TestCase& from);
  TestCase(TestCase&& from) noexcept
    : TestCase() {
    *this = ::std::move(from);
  }

  inline TestCase& operator=(const TestCase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCase& operator=(TestCase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestCase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestCase* internal_default_instance() {
    return reinterpret_cast<const TestCase*>(
               &_TestCase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestCase& a, TestCase& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestCase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestCase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestCase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestCase& from) {
    TestCase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tests.harness.TestCase";
  }
  protected:
  explicit TestCase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // .google.protobuf.Any message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::PROTOBUF_NAMESPACE_ID::Any& message() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_message();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_message();
  void set_allocated_message(::PROTOBUF_NAMESPACE_ID::Any* message);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_message() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::PROTOBUF_NAMESPACE_ID::Any* message);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:tests.harness.TestCase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Any* message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_harness_2eproto;
};
// -------------------------------------------------------------------

class TestResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tests.harness.TestResult) */ {
 public:
  inline TestResult() : TestResult(nullptr) {}
  ~TestResult() override;
  explicit PROTOBUF_CONSTEXPR TestResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestResult(const TestResult& from);
  TestResult(TestResult&& from) noexcept
    : TestResult() {
    *this = ::std::move(from);
  }

  inline TestResult& operator=(const TestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestResult& operator=(TestResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestResult* internal_default_instance() {
    return reinterpret_cast<const TestResult*>(
               &_TestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestResult& a, TestResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TestResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestResult& from) {
    TestResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tests.harness.TestResult";
  }
  protected:
  explicit TestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonsFieldNumber = 3,
    kValidFieldNumber = 1,
    kErrorFieldNumber = 2,
    kAllowFailureFieldNumber = 4,
    kCheckMultipleErrorsFieldNumber = 5,
  };
  // repeated string Reasons = 3;
  int reasons_size() const;
  private:
  int _internal_reasons_size() const;
  public:
  void clear_reasons();
  const std::string& reasons(int index) const;
  std::string* mutable_reasons(int index);
  void set_reasons(int index, const std::string& value);
  void set_reasons(int index, std::string&& value);
  void set_reasons(int index, const char* value);
  void set_reasons(int index, const char* value, size_t size);
  std::string* add_reasons();
  void add_reasons(const std::string& value);
  void add_reasons(std::string&& value);
  void add_reasons(const char* value);
  void add_reasons(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reasons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reasons();
  private:
  const std::string& _internal_reasons(int index) const;
  std::string* _internal_add_reasons();
  public:

  // bool Valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // bool Error = 2;
  void clear_error();
  bool error() const;
  void set_error(bool value);
  private:
  bool _internal_error() const;
  void _internal_set_error(bool value);
  public:

  // bool AllowFailure = 4;
  void clear_allowfailure();
  bool allowfailure() const;
  void set_allowfailure(bool value);
  private:
  bool _internal_allowfailure() const;
  void _internal_set_allowfailure(bool value);
  public:

  // bool CheckMultipleErrors = 5;
  void clear_checkmultipleerrors();
  bool checkmultipleerrors() const;
  void set_checkmultipleerrors(bool value);
  private:
  bool _internal_checkmultipleerrors() const;
  void _internal_set_checkmultipleerrors(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tests.harness.TestResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reasons_;
    bool valid_;
    bool error_;
    bool allowfailure_;
    bool checkmultipleerrors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_harness_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestCase

// .google.protobuf.Any message = 1;
inline bool TestCase::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool TestCase::has_message() const {
  return _internal_has_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TestCase::_internal_message() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TestCase::message() const {
  // @@protoc_insertion_point(field_get:tests.harness.TestCase.message)
  return _internal_message();
}
inline void TestCase::unsafe_arena_set_allocated_message(
    ::PROTOBUF_NAMESPACE_ID::Any* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tests.harness.TestCase.message)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestCase::release_message() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestCase::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:tests.harness.TestCase.message)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestCase::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestCase::mutable_message() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tests.harness.TestCase.message)
  return _msg;
}
inline void TestCase::set_allocated_message(::PROTOBUF_NAMESPACE_ID::Any* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:tests.harness.TestCase.message)
}

// -------------------------------------------------------------------

// TestResult

// bool Valid = 1;
inline void TestResult::clear_valid() {
  _impl_.valid_ = false;
}
inline bool TestResult::_internal_valid() const {
  return _impl_.valid_;
}
inline bool TestResult::valid() const {
  // @@protoc_insertion_point(field_get:tests.harness.TestResult.Valid)
  return _internal_valid();
}
inline void TestResult::_internal_set_valid(bool value) {
  
  _impl_.valid_ = value;
}
inline void TestResult::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:tests.harness.TestResult.Valid)
}

// bool Error = 2;
inline void TestResult::clear_error() {
  _impl_.error_ = false;
}
inline bool TestResult::_internal_error() const {
  return _impl_.error_;
}
inline bool TestResult::error() const {
  // @@protoc_insertion_point(field_get:tests.harness.TestResult.Error)
  return _internal_error();
}
inline void TestResult::_internal_set_error(bool value) {
  
  _impl_.error_ = value;
}
inline void TestResult::set_error(bool value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:tests.harness.TestResult.Error)
}

// repeated string Reasons = 3;
inline int TestResult::_internal_reasons_size() const {
  return _impl_.reasons_.size();
}
inline int TestResult::reasons_size() const {
  return _internal_reasons_size();
}
inline void TestResult::clear_reasons() {
  _impl_.reasons_.Clear();
}
inline std::string* TestResult::add_reasons() {
  std::string* _s = _internal_add_reasons();
  // @@protoc_insertion_point(field_add_mutable:tests.harness.TestResult.Reasons)
  return _s;
}
inline const std::string& TestResult::_internal_reasons(int index) const {
  return _impl_.reasons_.Get(index);
}
inline const std::string& TestResult::reasons(int index) const {
  // @@protoc_insertion_point(field_get:tests.harness.TestResult.Reasons)
  return _internal_reasons(index);
}
inline std::string* TestResult::mutable_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:tests.harness.TestResult.Reasons)
  return _impl_.reasons_.Mutable(index);
}
inline void TestResult::set_reasons(int index, const std::string& value) {
  _impl_.reasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tests.harness.TestResult.Reasons)
}
inline void TestResult::set_reasons(int index, std::string&& value) {
  _impl_.reasons_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tests.harness.TestResult.Reasons)
}
inline void TestResult::set_reasons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tests.harness.TestResult.Reasons)
}
inline void TestResult::set_reasons(int index, const char* value, size_t size) {
  _impl_.reasons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tests.harness.TestResult.Reasons)
}
inline std::string* TestResult::_internal_add_reasons() {
  return _impl_.reasons_.Add();
}
inline void TestResult::add_reasons(const std::string& value) {
  _impl_.reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tests.harness.TestResult.Reasons)
}
inline void TestResult::add_reasons(std::string&& value) {
  _impl_.reasons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tests.harness.TestResult.Reasons)
}
inline void TestResult::add_reasons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tests.harness.TestResult.Reasons)
}
inline void TestResult::add_reasons(const char* value, size_t size) {
  _impl_.reasons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tests.harness.TestResult.Reasons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestResult::reasons() const {
  // @@protoc_insertion_point(field_list:tests.harness.TestResult.Reasons)
  return _impl_.reasons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestResult::mutable_reasons() {
  // @@protoc_insertion_point(field_mutable_list:tests.harness.TestResult.Reasons)
  return &_impl_.reasons_;
}

// bool AllowFailure = 4;
inline void TestResult::clear_allowfailure() {
  _impl_.allowfailure_ = false;
}
inline bool TestResult::_internal_allowfailure() const {
  return _impl_.allowfailure_;
}
inline bool TestResult::allowfailure() const {
  // @@protoc_insertion_point(field_get:tests.harness.TestResult.AllowFailure)
  return _internal_allowfailure();
}
inline void TestResult::_internal_set_allowfailure(bool value) {
  
  _impl_.allowfailure_ = value;
}
inline void TestResult::set_allowfailure(bool value) {
  _internal_set_allowfailure(value);
  // @@protoc_insertion_point(field_set:tests.harness.TestResult.AllowFailure)
}

// bool CheckMultipleErrors = 5;
inline void TestResult::clear_checkmultipleerrors() {
  _impl_.checkmultipleerrors_ = false;
}
inline bool TestResult::_internal_checkmultipleerrors() const {
  return _impl_.checkmultipleerrors_;
}
inline bool TestResult::checkmultipleerrors() const {
  // @@protoc_insertion_point(field_get:tests.harness.TestResult.CheckMultipleErrors)
  return _internal_checkmultipleerrors();
}
inline void TestResult::_internal_set_checkmultipleerrors(bool value) {
  
  _impl_.checkmultipleerrors_ = value;
}
inline void TestResult::set_checkmultipleerrors(bool value) {
  _internal_set_checkmultipleerrors(value);
  // @@protoc_insertion_point(field_set:tests.harness.TestResult.CheckMultipleErrors)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace harness
}  // namespace tests

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_harness_2eproto
