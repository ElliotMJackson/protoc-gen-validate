syntax = "proto3";

package package.v1;
option go_package = "github.com/envoyproxy/protoc-gen-validate/tests/harness/cases/go;cases";
import "validate.proto";
import "other_package/v1/other_embed.proto";
import "yet_another_package/v1/yet_another_embed.proto";

enum TestEnum {
  TEST_ENUM_UNSPECIFIED = 0;
  TEST_ENUM_ZERO = 1;
  TEST_ENUM_ONE = 2;
  TEST_ENUM_TWO = 3;
}

enum TestEnumAlias {
  option allow_alias = true;

  TEST_ENUM_ALIAS_UNSPECIFIED = 0;
  TEST_ENUM_ALIAS_A = 1;
  TEST_ENUM_ALIAS_B = 2;
  TEST_ENUM_ALIAS_C = 3;

  TEST_ENUM_ALIAS_ALPHA = 1;
  TEST_ENUM_ALIAS_BETA = 2;
  TEST_ENUM_ALIAS_GAMMA = 3;
}

message EnumNone {
  TestEnum val = 1;
}

message EnumConst {
  TestEnum val = 1 [(validate.rules).enum.const = 2];
}
message EnumAliasConst {
  TestEnumAlias val = 1 [(validate.rules).enum.const = 2];
}

message EnumDefined {
  TestEnum val = 1 [(validate.rules).enum.defined_only = true];
}
message EnumAliasDefined {
  TestEnumAlias val = 1 [(validate.rules).enum.defined_only = true];
}

message EnumIn {
  TestEnum val = 1 [(validate.rules).enum = {in: [0, 2]}];
}
message EnumAliasIn {
  TestEnumAlias val = 1 [(validate.rules).enum = {in: [0, 2]}];
}

message EnumNotIn {
  TestEnum val = 1 [(validate.rules).enum = {not_in: [1]}];
}
message EnumAliasNotIn {
  TestEnumAlias val = 1 [(validate.rules).enum = {not_in: [1]}];
}

message EnumExternal {
  other_package.v1.Embed.Enumerated val = 1 [(validate.rules).enum.defined_only = true];
}
message EnumExternal2 {
  other_package.v1.Embed.DoubleEmbed.DoubleEnumerated val = 1
      [(validate.rules).enum.defined_only = true];
}

message RepeatedEnumDefined {
  repeated TestEnum val = 1 [(validate.rules).repeated .items.enum.defined_only = true];
}
message RepeatedExternalEnumDefined {
  repeated other_package.v1.Embed.Enumerated val = 1
      [(validate.rules).repeated .items.enum.defined_only = true];
}
message RepeatedYetAnotherExternalEnumDefined {
  repeated yet_another_package.v1.Embed.Enumerated val = 1
      [(validate.rules).repeated .items.enum.defined_only = true];
}

message MapEnumDefined {
  map<string, TestEnum> val = 1 [(validate.rules).map.values.enum.defined_only = true];
}
message MapExternalEnumDefined {
  map<string, other_package.v1.Embed.Enumerated> val = 1
      [(validate.rules).map.values.enum.defined_only = true];
}

message EnumInsideOneOf {
  oneof foo {
    TestEnum val = 1 [(validate.rules).enum.defined_only = true];
  }

  oneof bar {
    TestEnum val2 = 2 [(validate.rules).enum = {defined_only: true not_in: 0}];
  }
}
